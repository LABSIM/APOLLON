//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Labsim/Experiment/LEXIKHUM-OAT/Inputs/LEXIKHUMOATControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Labsim.experiment.LEXIKHUM_OAT
{
    public partial class @LEXIKHUMOATControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @LEXIKHUMOATControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""LEXIKHUMOATControl"",
    ""maps"": [
        {
            ""name"": ""Supervisor"",
            ""id"": ""1b2d2546-9fd5-4121-b255-813ca8a13152"",
            ""actions"": [
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f6fd4945-f262-401d-b770-179092bcfe09"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""92353687-f53a-425c-8097-861937fc4cee"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a582ef80-8a43-4e93-9c31-663deb78aae5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""baca7431-41e9-4108-8aad-b50889bf290f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a16080f-fe40-4465-b6ad-5147d8df4db5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55737f98-7818-482d-81d9-24bc107435dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3e31f4ab-7372-4d16-b767-c003cedf46d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""7f10fc9f-015a-46d8-8bd3-e149f0b2716f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""181d74b2-0b1c-44e3-be5c-27f2d9203add"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""3b0fceca-9b1d-473e-b849-ab9164cb9b8b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""f3520cf5-e6bb-4f20-a71a-ba3e25fad6d4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5258586-bd09-47e2-92cc-89487cada8fe"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f915b16b-a298-4cdc-b989-37a95d089828"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b3cd32cd-46c4-4597-a3c3-423ba1191b6e"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a0714126-f4b8-4702-a855-f17f0f8ef523"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""63ed249c-140e-4876-8fe1-7a75cdf7b436"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""754c382a-7cb5-416d-a055-5bb3ba6c386b"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0f6af808-7dad-4bc4-a4bf-1f65c85ca6ff"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d06bc34-f418-44cc-a5dc-199053ade8b3"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""491e4d50-8403-4be0-82df-c10d75a25a36"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""f420584b-7d34-49cb-8d33-7a3363ad7d5f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b0fc7b5-2a97-4629-a08c-44a902904e2e"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24674224-251f-4450-aea0-68e029e18474"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6266d188-6268-4481-b612-7f197724dcb5"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f61db93f-4317-4883-9db9-fe000a83fac9"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""1a590b3c-81e2-4207-9e1e-2e8a9501f7a2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c23f753c-416d-4094-aa1a-fde73f16c69c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d52cdf5b-e723-4069-97f2-c0e6b5ee127b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b8034243-1557-4bed-b9dd-1d866d47bcdf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f2cc746d-846d-4740-9164-e6d5932fd80d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc47160b-65bb-41e9-931b-b62b4b3078cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ee8fe4f2-698f-4ad0-b0d7-4d3afd78c1e4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fcf92166-1eb8-4caf-a528-3b1d51940353"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6ea38343-3a6b-4c58-a0f7-ea4f3e4d3f82"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e6a68e15-4c8e-4bee-bc2a-079a267f90d9"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6af27d95-3d24-4f1c-8476-1f73376b041d"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e94c301-4648-49ab-ad49-9d53ef720fae"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""565e445a-7682-4262-be28-b4820a7c62b4"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae87433b-f510-4c03-b1cb-83e19425789d"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c4a2cb-ba68-4bbb-9604-600dba03ea19"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ef113c8-1ac4-4d66-9b17-dc6be24ada1e"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""552628ea-6016-4df0-be6d-22f22fca3b83"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""309bbf83-18f6-4987-93bf-23c9871a7cda"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edefd91e-1940-46cd-a1b6-a0d97b19fe05"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ece1d548-f0dc-416f-afdf-8edc34cd5d8e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5142ff2-e601-4dd6-8c40-cb1802e8d047"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36a131d0-83ad-42ed-92ca-1b377e44b2d5"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad8620ff-2136-4699-ae5a-7246ca2568e4"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Subject"",
            ""id"": ""acdd86e9-02b1-489b-b10e-7f8d9467c5c0"",
            ""actions"": [
                {
                    ""name"": ""ResponseTriggered"",
                    ""type"": ""Button"",
                    ""id"": ""c18a8142-3cc1-4e43-ab8a-5980dadaeefa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickHorizontalValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""bda96176-247d-4b59-b636-c24ab5858ac5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickVerticalValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""88f1d516-702c-43a8-9659-28c077aefea9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleNegativeCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""a3fcec70-122a-4c51-bbc1-537d7e1617b8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottlePositiveCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""6d0e3820-b452-449b-af3c-3c4af319c15c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleNeutralCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""166cb148-b8bc-4509-8322-01231c94c1a4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""19c4cb0f-d5d9-4d50-9402-67dee0f4da4a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4f981d6-a806-4aa3-b22d-93639815f09d"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b254444-2f1f-4402-9c5b-5ad456a1899f"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=250,m_threshold_ratio_percentage=15,m_lower_bound=-0.05,m_upper_bound=0.23)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleNeutralCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed60e90f-3159-4e43-b5a6-c028f7cc5a29"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=50,m_lower_bound=0.75)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottlePositiveCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""044e99bf-4876-486a-8f7c-5ee441737f7d"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=50,m_upper_bound=-0.75)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleNegativeCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93209174-7de3-44e7-85e8-1c030e2144e4"",
                    ""path"": ""<HID::Thustmaster Joystick - HOTAS Warthog>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""JoystickHorizontalValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""303435ea-46f0-4d39-adca-3349c1536cc5"",
                    ""path"": ""<HID::Thustmaster Joystick - HOTAS Warthog>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba67ab68-e329-4aaa-a20d-3ea9d691869c"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/button15"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8492d7c-c3d6-411e-97fd-11d1627ccd43"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f2f489e-24e4-4b01-a042-bae5aeff2d2f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3ba3c14-4b2a-4f3a-b91f-1885c770043c"",
                    ""path"": ""<HID::Thustmaster Joystick - HOTAS Warthog>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""JoystickVerticalValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3a52230-523d-44f4-8990-116b2a91819d"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""JoystickHorizontalValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f275670-fac0-4fb6-b0a1-44fe88fddb0b"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""JoystickVerticalValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Supervisor
            m_Supervisor = asset.FindActionMap("Supervisor", throwIfNotFound: true);
            m_Supervisor_TrackedDeviceOrientation = m_Supervisor.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            m_Supervisor_TrackedDevicePosition = m_Supervisor.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_Supervisor_RightClick = m_Supervisor.FindAction("RightClick", throwIfNotFound: true);
            m_Supervisor_MiddleClick = m_Supervisor.FindAction("MiddleClick", throwIfNotFound: true);
            m_Supervisor_ScrollWheel = m_Supervisor.FindAction("ScrollWheel", throwIfNotFound: true);
            m_Supervisor_Click = m_Supervisor.FindAction("Click", throwIfNotFound: true);
            m_Supervisor_Point = m_Supervisor.FindAction("Point", throwIfNotFound: true);
            m_Supervisor_Cancel = m_Supervisor.FindAction("Cancel", throwIfNotFound: true);
            m_Supervisor_Submit = m_Supervisor.FindAction("Submit", throwIfNotFound: true);
            m_Supervisor_Navigate = m_Supervisor.FindAction("Navigate", throwIfNotFound: true);
            // Subject
            m_Subject = asset.FindActionMap("Subject", throwIfNotFound: true);
            m_Subject_ResponseTriggered = m_Subject.FindAction("ResponseTriggered", throwIfNotFound: true);
            m_Subject_JoystickHorizontalValueChanged = m_Subject.FindAction("JoystickHorizontalValueChanged", throwIfNotFound: true);
            m_Subject_JoystickVerticalValueChanged = m_Subject.FindAction("JoystickVerticalValueChanged", throwIfNotFound: true);
            m_Subject_ThrottleNegativeCommandTriggered = m_Subject.FindAction("ThrottleNegativeCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottlePositiveCommandTriggered = m_Subject.FindAction("ThrottlePositiveCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottleNeutralCommandTriggered = m_Subject.FindAction("ThrottleNeutralCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottleValueChanged = m_Subject.FindAction("ThrottleValueChanged", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Supervisor
        private readonly InputActionMap m_Supervisor;
        private List<ISupervisorActions> m_SupervisorActionsCallbackInterfaces = new List<ISupervisorActions>();
        private readonly InputAction m_Supervisor_TrackedDeviceOrientation;
        private readonly InputAction m_Supervisor_TrackedDevicePosition;
        private readonly InputAction m_Supervisor_RightClick;
        private readonly InputAction m_Supervisor_MiddleClick;
        private readonly InputAction m_Supervisor_ScrollWheel;
        private readonly InputAction m_Supervisor_Click;
        private readonly InputAction m_Supervisor_Point;
        private readonly InputAction m_Supervisor_Cancel;
        private readonly InputAction m_Supervisor_Submit;
        private readonly InputAction m_Supervisor_Navigate;
        public struct SupervisorActions
        {
            private @LEXIKHUMOATControl m_Wrapper;
            public SupervisorActions(@LEXIKHUMOATControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_Supervisor_TrackedDeviceOrientation;
            public InputAction @TrackedDevicePosition => m_Wrapper.m_Supervisor_TrackedDevicePosition;
            public InputAction @RightClick => m_Wrapper.m_Supervisor_RightClick;
            public InputAction @MiddleClick => m_Wrapper.m_Supervisor_MiddleClick;
            public InputAction @ScrollWheel => m_Wrapper.m_Supervisor_ScrollWheel;
            public InputAction @Click => m_Wrapper.m_Supervisor_Click;
            public InputAction @Point => m_Wrapper.m_Supervisor_Point;
            public InputAction @Cancel => m_Wrapper.m_Supervisor_Cancel;
            public InputAction @Submit => m_Wrapper.m_Supervisor_Submit;
            public InputAction @Navigate => m_Wrapper.m_Supervisor_Navigate;
            public InputActionMap Get() { return m_Wrapper.m_Supervisor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SupervisorActions set) { return set.Get(); }
            public void AddCallbacks(ISupervisorActions instance)
            {
                if (instance == null || m_Wrapper.m_SupervisorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SupervisorActionsCallbackInterfaces.Add(instance);
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
            }

            private void UnregisterCallbacks(ISupervisorActions instance)
            {
                @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
            }

            public void RemoveCallbacks(ISupervisorActions instance)
            {
                if (m_Wrapper.m_SupervisorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISupervisorActions instance)
            {
                foreach (var item in m_Wrapper.m_SupervisorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SupervisorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SupervisorActions @Supervisor => new SupervisorActions(this);

        // Subject
        private readonly InputActionMap m_Subject;
        private List<ISubjectActions> m_SubjectActionsCallbackInterfaces = new List<ISubjectActions>();
        private readonly InputAction m_Subject_ResponseTriggered;
        private readonly InputAction m_Subject_JoystickHorizontalValueChanged;
        private readonly InputAction m_Subject_JoystickVerticalValueChanged;
        private readonly InputAction m_Subject_ThrottleNegativeCommandTriggered;
        private readonly InputAction m_Subject_ThrottlePositiveCommandTriggered;
        private readonly InputAction m_Subject_ThrottleNeutralCommandTriggered;
        private readonly InputAction m_Subject_ThrottleValueChanged;
        public struct SubjectActions
        {
            private @LEXIKHUMOATControl m_Wrapper;
            public SubjectActions(@LEXIKHUMOATControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @ResponseTriggered => m_Wrapper.m_Subject_ResponseTriggered;
            public InputAction @JoystickHorizontalValueChanged => m_Wrapper.m_Subject_JoystickHorizontalValueChanged;
            public InputAction @JoystickVerticalValueChanged => m_Wrapper.m_Subject_JoystickVerticalValueChanged;
            public InputAction @ThrottleNegativeCommandTriggered => m_Wrapper.m_Subject_ThrottleNegativeCommandTriggered;
            public InputAction @ThrottlePositiveCommandTriggered => m_Wrapper.m_Subject_ThrottlePositiveCommandTriggered;
            public InputAction @ThrottleNeutralCommandTriggered => m_Wrapper.m_Subject_ThrottleNeutralCommandTriggered;
            public InputAction @ThrottleValueChanged => m_Wrapper.m_Subject_ThrottleValueChanged;
            public InputActionMap Get() { return m_Wrapper.m_Subject; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SubjectActions set) { return set.Get(); }
            public void AddCallbacks(ISubjectActions instance)
            {
                if (instance == null || m_Wrapper.m_SubjectActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SubjectActionsCallbackInterfaces.Add(instance);
                @ResponseTriggered.started += instance.OnResponseTriggered;
                @ResponseTriggered.performed += instance.OnResponseTriggered;
                @ResponseTriggered.canceled += instance.OnResponseTriggered;
                @JoystickHorizontalValueChanged.started += instance.OnJoystickHorizontalValueChanged;
                @JoystickHorizontalValueChanged.performed += instance.OnJoystickHorizontalValueChanged;
                @JoystickHorizontalValueChanged.canceled += instance.OnJoystickHorizontalValueChanged;
                @JoystickVerticalValueChanged.started += instance.OnJoystickVerticalValueChanged;
                @JoystickVerticalValueChanged.performed += instance.OnJoystickVerticalValueChanged;
                @JoystickVerticalValueChanged.canceled += instance.OnJoystickVerticalValueChanged;
                @ThrottleNegativeCommandTriggered.started += instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.performed += instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.canceled += instance.OnThrottleNegativeCommandTriggered;
                @ThrottlePositiveCommandTriggered.started += instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.performed += instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.canceled += instance.OnThrottlePositiveCommandTriggered;
                @ThrottleNeutralCommandTriggered.started += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.performed += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.canceled += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleValueChanged.started += instance.OnThrottleValueChanged;
                @ThrottleValueChanged.performed += instance.OnThrottleValueChanged;
                @ThrottleValueChanged.canceled += instance.OnThrottleValueChanged;
            }

            private void UnregisterCallbacks(ISubjectActions instance)
            {
                @ResponseTriggered.started -= instance.OnResponseTriggered;
                @ResponseTriggered.performed -= instance.OnResponseTriggered;
                @ResponseTriggered.canceled -= instance.OnResponseTriggered;
                @JoystickHorizontalValueChanged.started -= instance.OnJoystickHorizontalValueChanged;
                @JoystickHorizontalValueChanged.performed -= instance.OnJoystickHorizontalValueChanged;
                @JoystickHorizontalValueChanged.canceled -= instance.OnJoystickHorizontalValueChanged;
                @JoystickVerticalValueChanged.started -= instance.OnJoystickVerticalValueChanged;
                @JoystickVerticalValueChanged.performed -= instance.OnJoystickVerticalValueChanged;
                @JoystickVerticalValueChanged.canceled -= instance.OnJoystickVerticalValueChanged;
                @ThrottleNegativeCommandTriggered.started -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.performed -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.canceled -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottlePositiveCommandTriggered.started -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.performed -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.canceled -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottleNeutralCommandTriggered.started -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.performed -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.canceled -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleValueChanged.started -= instance.OnThrottleValueChanged;
                @ThrottleValueChanged.performed -= instance.OnThrottleValueChanged;
                @ThrottleValueChanged.canceled -= instance.OnThrottleValueChanged;
            }

            public void RemoveCallbacks(ISubjectActions instance)
            {
                if (m_Wrapper.m_SubjectActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISubjectActions instance)
            {
                foreach (var item in m_Wrapper.m_SubjectActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SubjectActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SubjectActions @Subject => new SubjectActions(this);
        public interface ISupervisorActions
        {
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnNavigate(InputAction.CallbackContext context);
        }
        public interface ISubjectActions
        {
            void OnResponseTriggered(InputAction.CallbackContext context);
            void OnJoystickHorizontalValueChanged(InputAction.CallbackContext context);
            void OnJoystickVerticalValueChanged(InputAction.CallbackContext context);
            void OnThrottleNegativeCommandTriggered(InputAction.CallbackContext context);
            void OnThrottlePositiveCommandTriggered(InputAction.CallbackContext context);
            void OnThrottleNeutralCommandTriggered(InputAction.CallbackContext context);
            void OnThrottleValueChanged(InputAction.CallbackContext context);
        }
    }
}
