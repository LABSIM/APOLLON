//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Labsim/Experiment/AgencyAndThresholdPerceptionV3/Inputs/AgencyAndThresholdPerceptionV3Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Labsim.apollon.gameplay.control
{
    public partial class @ApollonAgencyAndThresholdPerceptionV3Control: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ApollonAgencyAndThresholdPerceptionV3Control()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""AgencyAndThresholdPerceptionV3Control"",
    ""maps"": [
        {
            ""name"": ""Subject"",
            ""id"": ""7472c70a-e501-4446-8151-0057c98ed535"",
            ""actions"": [
                {
                    ""name"": ""ResponseTriggered"",
                    ""type"": ""Button"",
                    ""id"": ""2b21c6a2-438d-4028-ac3e-9cc4820d3667"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoystickValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""c09c371a-3c3a-470c-8620-c0e48a08c2bb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleNegativeCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""325dfe47-5cff-4276-9813-646cd3dba230"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottlePositiveCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""468200dc-d73a-4075-830f-a9ffc0a22150"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleNeutralCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""969d5ee1-92af-488f-8530-b9775e158415"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThrottleValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""180469d6-8d8a-4633-abf7-ad055912d064"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a33435a-3588-4103-bb3e-54c7b4fc7683"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1549d39-5602-44c2-9d91-24cbeaae1be1"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=250,m_threshold_ratio_percentage=15,m_lower_bound=-0.05,m_upper_bound=0.23)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleNeutralCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3921247b-cedd-41ef-a551-b0e39073d180"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=50,m_lower_bound=0.75)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottlePositiveCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fff0961-9c5c-4abd-9dfd-e1c3dc126083"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=50,m_upper_bound=-0.75)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ThrottleNegativeCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31a3d843-e12c-4bb4-9452-fabf67e8525f"",
                    ""path"": ""<HID::Thustmaster Joystick - HOTAS Warthog>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""JoystickValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f3179a3-7b19-4de1-8658-7c9328276af9"",
                    ""path"": ""<HID::Thustmaster Joystick - HOTAS Warthog>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c59d7fc7-4eed-4590-954a-53618a25068a"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/button15"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79a461e6-98c9-4de6-80b7-e255e872b8e5"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ResponseTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Supervisor"",
            ""id"": ""ba223dd0-9551-42c1-8fb8-2176e8ef05e8"",
            ""actions"": [
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cb6b3f8d-5f9b-4c83-a7b5-f563aeaa447c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eb8eeeaa-6ab8-4287-b8dd-b56cf2b64371"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5da00d7c-869b-48bf-a687-b7c9571598d4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9b70c733-83fb-447e-9ee8-2daab250c910"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0ca1bcb0-55a8-4eed-b77a-ca3ae6ed982f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5620f64-2ee9-4fcf-bbb5-8f1937fbb42e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""46b19940-aa5a-495f-9e15-a27746d6b768"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""7d3bddd2-df40-4e96-9f15-eafa0af2d398"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""cc55e844-4c7d-48b2-9f89-71dbc2a8ff66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""012ef652-a1a0-4f2a-9aca-37bcef82f667"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""3ed5ad6b-0989-4b30-bd31-50683a0ba512"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bdcb9860-a827-47ba-aeea-a88a11745571"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""61c028a2-2322-4bd4-a953-b18c0fa7e0fb"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""031f57c9-77d3-4910-96ed-73657dfd5f24"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""30f07b1b-b821-4846-adc8-c5c5c5aeb1d7"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2b35cadd-457a-4424-b9a0-f196b6547bbb"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e69467a0-adc4-49b6-b317-faf27c6e7ab1"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5c57721c-52b4-478d-9509-d6d3074cf3ee"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2e9aca54-c02c-48df-9091-3f5ddf28f52b"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee682fad-0e58-4f72-a423-437c8ef16075"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""23045dac-e4ea-4788-b0ac-ba732ac086d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9652dae3-1ffd-4baf-9c19-e17279a07d4d"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c0a6ca02-9c1e-4f41-b323-4d7ddef03b23"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2cef157c-8c90-46f2-8239-0591bcdc348d"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5c3c5f9-42f9-48a2-b03f-04f386b2ace9"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""cedde660-24be-44d6-95e0-72a4569f9f53"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""18bb264f-36cd-4849-879e-9068f548d7b4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76867bff-88b3-40b4-b536-2d5b299588af"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e19415a-d10a-4d37-a173-9edd9d279a9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6679f8e6-b0fb-41a6-b224-758c06d5b55d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0eb6dc7e-413f-4ed4-bc88-ddbcba804677"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7cd97be2-3a46-42fa-92e1-fe1360a220e5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3ed5bf1-6b5f-4d15-a605-5dc4decf5cc7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2a104da-6a4a-4f7d-acb0-b7a772eaeeee"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fc6adf53-16bc-44a2-8cc7-0b5e88015c37"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29f15b39-e201-4edb-ab1c-094a6a4b819f"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64b47850-c818-4ede-9a54-59382e5c141a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""172d88ab-4aae-42a2-a6a2-85d94f2eeaf4"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89f6c7ea-b48a-4d54-ba8d-aea07d34138f"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8800219b-8bf4-4882-96e2-d4131fae0729"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e271a41-b4db-4d9b-ae6f-13c896fe65df"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b372643b-b533-4400-b61d-e078363a22a4"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13a8e05c-20ba-4f91-928c-2b37069f4862"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""423d4c48-03d4-4155-888f-718038442582"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d6e461c-41c6-421d-80d6-ca5f4d543a66"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0269154f-70c3-4e89-943e-ae81b331f4a1"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c270183f-3644-4ce2-a432-cf68e4170cfc"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57fd2a5d-5d18-45a1-99c4-1e860e2a2095"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Cockpit"",
            ""bindingGroup"": ""Cockpit"",
            ""devices"": [
                {
                    ""devicePath"": ""<HID::Thustmaster Joystick - HOTAS Warthog>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Control"",
            ""bindingGroup"": ""Control"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Subject
            m_Subject = asset.FindActionMap("Subject", throwIfNotFound: true);
            m_Subject_ResponseTriggered = m_Subject.FindAction("ResponseTriggered", throwIfNotFound: true);
            m_Subject_JoystickValueChanged = m_Subject.FindAction("JoystickValueChanged", throwIfNotFound: true);
            m_Subject_ThrottleNegativeCommandTriggered = m_Subject.FindAction("ThrottleNegativeCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottlePositiveCommandTriggered = m_Subject.FindAction("ThrottlePositiveCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottleNeutralCommandTriggered = m_Subject.FindAction("ThrottleNeutralCommandTriggered", throwIfNotFound: true);
            m_Subject_ThrottleValueChanged = m_Subject.FindAction("ThrottleValueChanged", throwIfNotFound: true);
            // Supervisor
            m_Supervisor = asset.FindActionMap("Supervisor", throwIfNotFound: true);
            m_Supervisor_TrackedDeviceOrientation = m_Supervisor.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            m_Supervisor_TrackedDevicePosition = m_Supervisor.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_Supervisor_RightClick = m_Supervisor.FindAction("RightClick", throwIfNotFound: true);
            m_Supervisor_MiddleClick = m_Supervisor.FindAction("MiddleClick", throwIfNotFound: true);
            m_Supervisor_ScrollWheel = m_Supervisor.FindAction("ScrollWheel", throwIfNotFound: true);
            m_Supervisor_Click = m_Supervisor.FindAction("Click", throwIfNotFound: true);
            m_Supervisor_Point = m_Supervisor.FindAction("Point", throwIfNotFound: true);
            m_Supervisor_Cancel = m_Supervisor.FindAction("Cancel", throwIfNotFound: true);
            m_Supervisor_Submit = m_Supervisor.FindAction("Submit", throwIfNotFound: true);
            m_Supervisor_Navigate = m_Supervisor.FindAction("Navigate", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Subject
        private readonly InputActionMap m_Subject;
        private List<ISubjectActions> m_SubjectActionsCallbackInterfaces = new List<ISubjectActions>();
        private readonly InputAction m_Subject_ResponseTriggered;
        private readonly InputAction m_Subject_JoystickValueChanged;
        private readonly InputAction m_Subject_ThrottleNegativeCommandTriggered;
        private readonly InputAction m_Subject_ThrottlePositiveCommandTriggered;
        private readonly InputAction m_Subject_ThrottleNeutralCommandTriggered;
        private readonly InputAction m_Subject_ThrottleValueChanged;
        public struct SubjectActions
        {
            private @ApollonAgencyAndThresholdPerceptionV3Control m_Wrapper;
            public SubjectActions(@ApollonAgencyAndThresholdPerceptionV3Control wrapper) { m_Wrapper = wrapper; }
            public InputAction @ResponseTriggered => m_Wrapper.m_Subject_ResponseTriggered;
            public InputAction @JoystickValueChanged => m_Wrapper.m_Subject_JoystickValueChanged;
            public InputAction @ThrottleNegativeCommandTriggered => m_Wrapper.m_Subject_ThrottleNegativeCommandTriggered;
            public InputAction @ThrottlePositiveCommandTriggered => m_Wrapper.m_Subject_ThrottlePositiveCommandTriggered;
            public InputAction @ThrottleNeutralCommandTriggered => m_Wrapper.m_Subject_ThrottleNeutralCommandTriggered;
            public InputAction @ThrottleValueChanged => m_Wrapper.m_Subject_ThrottleValueChanged;
            public InputActionMap Get() { return m_Wrapper.m_Subject; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SubjectActions set) { return set.Get(); }
            public void AddCallbacks(ISubjectActions instance)
            {
                if (instance == null || m_Wrapper.m_SubjectActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SubjectActionsCallbackInterfaces.Add(instance);
                @ResponseTriggered.started += instance.OnResponseTriggered;
                @ResponseTriggered.performed += instance.OnResponseTriggered;
                @ResponseTriggered.canceled += instance.OnResponseTriggered;
                @JoystickValueChanged.started += instance.OnJoystickValueChanged;
                @JoystickValueChanged.performed += instance.OnJoystickValueChanged;
                @JoystickValueChanged.canceled += instance.OnJoystickValueChanged;
                @ThrottleNegativeCommandTriggered.started += instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.performed += instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.canceled += instance.OnThrottleNegativeCommandTriggered;
                @ThrottlePositiveCommandTriggered.started += instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.performed += instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.canceled += instance.OnThrottlePositiveCommandTriggered;
                @ThrottleNeutralCommandTriggered.started += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.performed += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.canceled += instance.OnThrottleNeutralCommandTriggered;
                @ThrottleValueChanged.started += instance.OnThrottleValueChanged;
                @ThrottleValueChanged.performed += instance.OnThrottleValueChanged;
                @ThrottleValueChanged.canceled += instance.OnThrottleValueChanged;
            }

            private void UnregisterCallbacks(ISubjectActions instance)
            {
                @ResponseTriggered.started -= instance.OnResponseTriggered;
                @ResponseTriggered.performed -= instance.OnResponseTriggered;
                @ResponseTriggered.canceled -= instance.OnResponseTriggered;
                @JoystickValueChanged.started -= instance.OnJoystickValueChanged;
                @JoystickValueChanged.performed -= instance.OnJoystickValueChanged;
                @JoystickValueChanged.canceled -= instance.OnJoystickValueChanged;
                @ThrottleNegativeCommandTriggered.started -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.performed -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottleNegativeCommandTriggered.canceled -= instance.OnThrottleNegativeCommandTriggered;
                @ThrottlePositiveCommandTriggered.started -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.performed -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottlePositiveCommandTriggered.canceled -= instance.OnThrottlePositiveCommandTriggered;
                @ThrottleNeutralCommandTriggered.started -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.performed -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleNeutralCommandTriggered.canceled -= instance.OnThrottleNeutralCommandTriggered;
                @ThrottleValueChanged.started -= instance.OnThrottleValueChanged;
                @ThrottleValueChanged.performed -= instance.OnThrottleValueChanged;
                @ThrottleValueChanged.canceled -= instance.OnThrottleValueChanged;
            }

            public void RemoveCallbacks(ISubjectActions instance)
            {
                if (m_Wrapper.m_SubjectActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISubjectActions instance)
            {
                foreach (var item in m_Wrapper.m_SubjectActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SubjectActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SubjectActions @Subject => new SubjectActions(this);

        // Supervisor
        private readonly InputActionMap m_Supervisor;
        private List<ISupervisorActions> m_SupervisorActionsCallbackInterfaces = new List<ISupervisorActions>();
        private readonly InputAction m_Supervisor_TrackedDeviceOrientation;
        private readonly InputAction m_Supervisor_TrackedDevicePosition;
        private readonly InputAction m_Supervisor_RightClick;
        private readonly InputAction m_Supervisor_MiddleClick;
        private readonly InputAction m_Supervisor_ScrollWheel;
        private readonly InputAction m_Supervisor_Click;
        private readonly InputAction m_Supervisor_Point;
        private readonly InputAction m_Supervisor_Cancel;
        private readonly InputAction m_Supervisor_Submit;
        private readonly InputAction m_Supervisor_Navigate;
        public struct SupervisorActions
        {
            private @ApollonAgencyAndThresholdPerceptionV3Control m_Wrapper;
            public SupervisorActions(@ApollonAgencyAndThresholdPerceptionV3Control wrapper) { m_Wrapper = wrapper; }
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_Supervisor_TrackedDeviceOrientation;
            public InputAction @TrackedDevicePosition => m_Wrapper.m_Supervisor_TrackedDevicePosition;
            public InputAction @RightClick => m_Wrapper.m_Supervisor_RightClick;
            public InputAction @MiddleClick => m_Wrapper.m_Supervisor_MiddleClick;
            public InputAction @ScrollWheel => m_Wrapper.m_Supervisor_ScrollWheel;
            public InputAction @Click => m_Wrapper.m_Supervisor_Click;
            public InputAction @Point => m_Wrapper.m_Supervisor_Point;
            public InputAction @Cancel => m_Wrapper.m_Supervisor_Cancel;
            public InputAction @Submit => m_Wrapper.m_Supervisor_Submit;
            public InputAction @Navigate => m_Wrapper.m_Supervisor_Navigate;
            public InputActionMap Get() { return m_Wrapper.m_Supervisor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SupervisorActions set) { return set.Get(); }
            public void AddCallbacks(ISupervisorActions instance)
            {
                if (instance == null || m_Wrapper.m_SupervisorActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SupervisorActionsCallbackInterfaces.Add(instance);
                @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @MiddleClick.started += instance.OnMiddleClick;
                @MiddleClick.performed += instance.OnMiddleClick;
                @MiddleClick.canceled += instance.OnMiddleClick;
                @ScrollWheel.started += instance.OnScrollWheel;
                @ScrollWheel.performed += instance.OnScrollWheel;
                @ScrollWheel.canceled += instance.OnScrollWheel;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @Navigate.started += instance.OnNavigate;
                @Navigate.performed += instance.OnNavigate;
                @Navigate.canceled += instance.OnNavigate;
            }

            private void UnregisterCallbacks(ISupervisorActions instance)
            {
                @TrackedDeviceOrientation.started -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.performed -= instance.OnTrackedDeviceOrientation;
                @TrackedDeviceOrientation.canceled -= instance.OnTrackedDeviceOrientation;
                @TrackedDevicePosition.started -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.performed -= instance.OnTrackedDevicePosition;
                @TrackedDevicePosition.canceled -= instance.OnTrackedDevicePosition;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @MiddleClick.started -= instance.OnMiddleClick;
                @MiddleClick.performed -= instance.OnMiddleClick;
                @MiddleClick.canceled -= instance.OnMiddleClick;
                @ScrollWheel.started -= instance.OnScrollWheel;
                @ScrollWheel.performed -= instance.OnScrollWheel;
                @ScrollWheel.canceled -= instance.OnScrollWheel;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @Point.started -= instance.OnPoint;
                @Point.performed -= instance.OnPoint;
                @Point.canceled -= instance.OnPoint;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Submit.started -= instance.OnSubmit;
                @Submit.performed -= instance.OnSubmit;
                @Submit.canceled -= instance.OnSubmit;
                @Navigate.started -= instance.OnNavigate;
                @Navigate.performed -= instance.OnNavigate;
                @Navigate.canceled -= instance.OnNavigate;
            }

            public void RemoveCallbacks(ISupervisorActions instance)
            {
                if (m_Wrapper.m_SupervisorActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISupervisorActions instance)
            {
                foreach (var item in m_Wrapper.m_SupervisorActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SupervisorActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SupervisorActions @Supervisor => new SupervisorActions(this);
        private int m_CockpitSchemeIndex = -1;
        public InputControlScheme CockpitScheme
        {
            get
            {
                if (m_CockpitSchemeIndex == -1) m_CockpitSchemeIndex = asset.FindControlSchemeIndex("Cockpit");
                return asset.controlSchemes[m_CockpitSchemeIndex];
            }
        }
        private int m_ControlSchemeIndex = -1;
        public InputControlScheme ControlScheme
        {
            get
            {
                if (m_ControlSchemeIndex == -1) m_ControlSchemeIndex = asset.FindControlSchemeIndex("Control");
                return asset.controlSchemes[m_ControlSchemeIndex];
            }
        }
        public interface ISubjectActions
        {
            void OnResponseTriggered(InputAction.CallbackContext context);
            void OnJoystickValueChanged(InputAction.CallbackContext context);
            void OnThrottleNegativeCommandTriggered(InputAction.CallbackContext context);
            void OnThrottlePositiveCommandTriggered(InputAction.CallbackContext context);
            void OnThrottleNeutralCommandTriggered(InputAction.CallbackContext context);
            void OnThrottleValueChanged(InputAction.CallbackContext context);
        }
        public interface ISupervisorActions
        {
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnNavigate(InputAction.CallbackContext context);
        }
    }
}
