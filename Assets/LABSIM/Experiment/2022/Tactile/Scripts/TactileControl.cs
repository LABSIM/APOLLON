//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/LABSIM/Experiment/2022/Tactile/Inputs/TactileControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Labsim.experiment.tactile
{
    public partial class @TactileControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TactileControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TactileControl"",
    ""maps"": [
        {
            ""name"": ""Supervisor"",
            ""id"": ""8f5cacde-a17e-4252-b8b4-b0f64042d060"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""1c75735b-e4fc-419f-be6b-31b5654f04f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""47c9cf7e-d820-4c1f-8cc5-c9663245c0d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""dfdd9314-34a0-40c7-bcbd-f4844a638ad4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5271194-a8bf-43ef-bb6f-eb4dd041d535"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8fb205cd-e7f9-4d4e-8854-8a73a4d63e25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f50ae45-79fe-4b12-9d96-c1d1011e832c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a3e7e2cf-a513-4d2e-b79d-805ff1deef0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5d82877-cef9-4e00-8b75-e5bb88a4cb6d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDevicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""408cfae5-f63b-43c9-a82d-5b4ac44cc86c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackedDeviceOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""23167b87-ceef-4cc7-96e9-8aba9a91a4ce"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""d681aba7-f2a5-4eb7-8f7a-24481c473eeb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8b4e4f0-17e8-48bb-8937-97a12be327d0"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70787bdf-1762-4c3f-aab8-0ca85e1df75e"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e8e901f-858b-4eb5-962f-295e8dd255a3"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""13413675-e7ad-41f0-8346-f55bde439d40"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9851e8a6-07f3-4beb-b2aa-c7baa2f45a32"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dc3b33a2-7301-4559-ab24-a1669cc173d1"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0bf3358d-b626-410f-a9da-cebcb6abbbc1"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78d1cca3-bf46-4a5c-bfdd-33567f81273d"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""50cfbc76-ee44-428c-942a-ef2f702d9387"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""a5b17733-a300-4291-b22b-fb4990feeea2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0128dfa6-8a7d-4d1d-83f3-12ed921aa829"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d24b38c8-f83f-422f-b7e6-3b0083490c20"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc6a09da-1fb9-4ea8-aedc-edf26ec262d4"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e6155a74-2e6c-4c6e-a537-f354a42129db"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""d38eea0a-a76f-482b-8a38-1ec050de8350"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""657cbdb4-766e-41b4-8611-d30e0f3c35f2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3550f62-76e2-4984-b120-4d516f7e3596"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e6b4ce17-a944-49a4-a417-32913fa92aec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""50585c96-b415-4260-a4d7-9cdaa6cbc20a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""337f5e9f-efe0-467b-bc6f-e814846d93de"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""263c3cc4-53b4-4af5-a070-40886dc48af7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""197c1734-04d9-4a64-b5b1-f52a4e6f670e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9e229db-9386-41f6-835b-200ec22ab536"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f26f7aee-eaf0-4227-a7ca-2813cc177502"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f4db834-8679-4032-815d-293dfae64714"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bb9a56a-4f0b-4e53-a082-75fd9319e7e4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b250bd5a-2d1c-493e-937b-d239a7f48cf0"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb99c02a-e1b4-4fc2-af57-153ac1ad4745"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb38ce17-1e12-476f-bbca-d5f49487ee82"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba422391-eddb-480e-995e-13328e000b57"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e4ca0aa-f835-4eee-afe5-32954d994664"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1dd0e48-4e4e-472e-b857-ecd06d7fe30f"",
                    ""path"": ""<XRController>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cead0fa4-871b-4f03-b5a8-5e947d4f047d"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d065e833-6124-433e-a764-192533bfa436"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f42b654-a2ad-4307-af09-8420492b9bc0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ea12618-5528-46e9-b60a-6abd749c594c"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""TrackedDevicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e701f11b-0d39-43af-8e19-8fceef6eef7a"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR"",
                    ""action"": ""TrackedDeviceOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Subject"",
            ""id"": ""cbf5a0a3-86df-4093-836f-ae917e7723e0"",
            ""actions"": [
                {
                    ""name"": ""ValueChanged"",
                    ""type"": ""Value"",
                    ""id"": ""068ad519-49b8-4128-ac79-3c9d5cc2b531"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NeutralCommandTriggered"",
                    ""type"": ""Value"",
                    ""id"": ""1de25ff8-b81d-441d-87fc-63e8a48dbc76"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UserResponse"",
                    ""type"": ""Button"",
                    ""id"": ""b1efff05-b8a6-494a-a313-e1e0ee454881"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ba622a9-0a60-4a74-b63d-9c22861bf622"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""ValueChanged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9da22e8a-755b-410b-8ec9-a91067429ba6"",
                    ""path"": ""<HID::Thrustmaster Throttle - HOTAS Warthog>/z"",
                    ""interactions"": ""ApollonHoldInRangeWithThreshold(m_duration_ms=750,m_lower_bound=-0.25,m_upper_bound=0.25)"",
                    ""processors"": ""AxisDeadzone,Invert"",
                    ""groups"": ""Cockpit"",
                    ""action"": ""NeutralCommandTriggered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""775acc96-d0a9-47e4-956b-067d582e6f92"",
                    ""path"": ""<OpenXRDevice>"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UserResponse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Supervisor
            m_Supervisor = asset.FindActionMap("Supervisor", throwIfNotFound: true);
            m_Supervisor_Navigate = m_Supervisor.FindAction("Navigate", throwIfNotFound: true);
            m_Supervisor_Submit = m_Supervisor.FindAction("Submit", throwIfNotFound: true);
            m_Supervisor_Cancel = m_Supervisor.FindAction("Cancel", throwIfNotFound: true);
            m_Supervisor_Point = m_Supervisor.FindAction("Point", throwIfNotFound: true);
            m_Supervisor_Click = m_Supervisor.FindAction("Click", throwIfNotFound: true);
            m_Supervisor_ScrollWheel = m_Supervisor.FindAction("ScrollWheel", throwIfNotFound: true);
            m_Supervisor_MiddleClick = m_Supervisor.FindAction("MiddleClick", throwIfNotFound: true);
            m_Supervisor_RightClick = m_Supervisor.FindAction("RightClick", throwIfNotFound: true);
            m_Supervisor_TrackedDevicePosition = m_Supervisor.FindAction("TrackedDevicePosition", throwIfNotFound: true);
            m_Supervisor_TrackedDeviceOrientation = m_Supervisor.FindAction("TrackedDeviceOrientation", throwIfNotFound: true);
            // Subject
            m_Subject = asset.FindActionMap("Subject", throwIfNotFound: true);
            m_Subject_ValueChanged = m_Subject.FindAction("ValueChanged", throwIfNotFound: true);
            m_Subject_NeutralCommandTriggered = m_Subject.FindAction("NeutralCommandTriggered", throwIfNotFound: true);
            m_Subject_UserResponse = m_Subject.FindAction("UserResponse", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Supervisor
        private readonly InputActionMap m_Supervisor;
        private ISupervisorActions m_SupervisorActionsCallbackInterface;
        private readonly InputAction m_Supervisor_Navigate;
        private readonly InputAction m_Supervisor_Submit;
        private readonly InputAction m_Supervisor_Cancel;
        private readonly InputAction m_Supervisor_Point;
        private readonly InputAction m_Supervisor_Click;
        private readonly InputAction m_Supervisor_ScrollWheel;
        private readonly InputAction m_Supervisor_MiddleClick;
        private readonly InputAction m_Supervisor_RightClick;
        private readonly InputAction m_Supervisor_TrackedDevicePosition;
        private readonly InputAction m_Supervisor_TrackedDeviceOrientation;
        public struct SupervisorActions
        {
            private @TactileControl m_Wrapper;
            public SupervisorActions(@TactileControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Navigate => m_Wrapper.m_Supervisor_Navigate;
            public InputAction @Submit => m_Wrapper.m_Supervisor_Submit;
            public InputAction @Cancel => m_Wrapper.m_Supervisor_Cancel;
            public InputAction @Point => m_Wrapper.m_Supervisor_Point;
            public InputAction @Click => m_Wrapper.m_Supervisor_Click;
            public InputAction @ScrollWheel => m_Wrapper.m_Supervisor_ScrollWheel;
            public InputAction @MiddleClick => m_Wrapper.m_Supervisor_MiddleClick;
            public InputAction @RightClick => m_Wrapper.m_Supervisor_RightClick;
            public InputAction @TrackedDevicePosition => m_Wrapper.m_Supervisor_TrackedDevicePosition;
            public InputAction @TrackedDeviceOrientation => m_Wrapper.m_Supervisor_TrackedDeviceOrientation;
            public InputActionMap Get() { return m_Wrapper.m_Supervisor; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SupervisorActions set) { return set.Get(); }
            public void SetCallbacks(ISupervisorActions instance)
            {
                if (m_Wrapper.m_SupervisorActionsCallbackInterface != null)
                {
                    @Navigate.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnNavigate;
                    @Navigate.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnNavigate;
                    @Navigate.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnNavigate;
                    @Submit.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnSubmit;
                    @Submit.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnSubmit;
                    @Submit.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnSubmit;
                    @Cancel.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnCancel;
                    @Cancel.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnCancel;
                    @Cancel.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnCancel;
                    @Point.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnPoint;
                    @Click.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnClick;
                    @ScrollWheel.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnScrollWheel;
                    @ScrollWheel.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnScrollWheel;
                    @ScrollWheel.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnScrollWheel;
                    @MiddleClick.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnMiddleClick;
                    @RightClick.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnRightClick;
                    @RightClick.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnRightClick;
                    @RightClick.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnRightClick;
                    @TrackedDevicePosition.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDevicePosition;
                    @TrackedDevicePosition.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDevicePosition;
                    @TrackedDevicePosition.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDevicePosition;
                    @TrackedDeviceOrientation.started -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDeviceOrientation;
                    @TrackedDeviceOrientation.performed -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDeviceOrientation;
                    @TrackedDeviceOrientation.canceled -= m_Wrapper.m_SupervisorActionsCallbackInterface.OnTrackedDeviceOrientation;
                }
                m_Wrapper.m_SupervisorActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Navigate.started += instance.OnNavigate;
                    @Navigate.performed += instance.OnNavigate;
                    @Navigate.canceled += instance.OnNavigate;
                    @Submit.started += instance.OnSubmit;
                    @Submit.performed += instance.OnSubmit;
                    @Submit.canceled += instance.OnSubmit;
                    @Cancel.started += instance.OnCancel;
                    @Cancel.performed += instance.OnCancel;
                    @Cancel.canceled += instance.OnCancel;
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                    @ScrollWheel.started += instance.OnScrollWheel;
                    @ScrollWheel.performed += instance.OnScrollWheel;
                    @ScrollWheel.canceled += instance.OnScrollWheel;
                    @MiddleClick.started += instance.OnMiddleClick;
                    @MiddleClick.performed += instance.OnMiddleClick;
                    @MiddleClick.canceled += instance.OnMiddleClick;
                    @RightClick.started += instance.OnRightClick;
                    @RightClick.performed += instance.OnRightClick;
                    @RightClick.canceled += instance.OnRightClick;
                    @TrackedDevicePosition.started += instance.OnTrackedDevicePosition;
                    @TrackedDevicePosition.performed += instance.OnTrackedDevicePosition;
                    @TrackedDevicePosition.canceled += instance.OnTrackedDevicePosition;
                    @TrackedDeviceOrientation.started += instance.OnTrackedDeviceOrientation;
                    @TrackedDeviceOrientation.performed += instance.OnTrackedDeviceOrientation;
                    @TrackedDeviceOrientation.canceled += instance.OnTrackedDeviceOrientation;
                }
            }
        }
        public SupervisorActions @Supervisor => new SupervisorActions(this);

        // Subject
        private readonly InputActionMap m_Subject;
        private ISubjectActions m_SubjectActionsCallbackInterface;
        private readonly InputAction m_Subject_ValueChanged;
        private readonly InputAction m_Subject_NeutralCommandTriggered;
        private readonly InputAction m_Subject_UserResponse;
        public struct SubjectActions
        {
            private @TactileControl m_Wrapper;
            public SubjectActions(@TactileControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @ValueChanged => m_Wrapper.m_Subject_ValueChanged;
            public InputAction @NeutralCommandTriggered => m_Wrapper.m_Subject_NeutralCommandTriggered;
            public InputAction @UserResponse => m_Wrapper.m_Subject_UserResponse;
            public InputActionMap Get() { return m_Wrapper.m_Subject; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SubjectActions set) { return set.Get(); }
            public void SetCallbacks(ISubjectActions instance)
            {
                if (m_Wrapper.m_SubjectActionsCallbackInterface != null)
                {
                    @ValueChanged.started -= m_Wrapper.m_SubjectActionsCallbackInterface.OnValueChanged;
                    @ValueChanged.performed -= m_Wrapper.m_SubjectActionsCallbackInterface.OnValueChanged;
                    @ValueChanged.canceled -= m_Wrapper.m_SubjectActionsCallbackInterface.OnValueChanged;
                    @NeutralCommandTriggered.started -= m_Wrapper.m_SubjectActionsCallbackInterface.OnNeutralCommandTriggered;
                    @NeutralCommandTriggered.performed -= m_Wrapper.m_SubjectActionsCallbackInterface.OnNeutralCommandTriggered;
                    @NeutralCommandTriggered.canceled -= m_Wrapper.m_SubjectActionsCallbackInterface.OnNeutralCommandTriggered;
                    @UserResponse.started -= m_Wrapper.m_SubjectActionsCallbackInterface.OnUserResponse;
                    @UserResponse.performed -= m_Wrapper.m_SubjectActionsCallbackInterface.OnUserResponse;
                    @UserResponse.canceled -= m_Wrapper.m_SubjectActionsCallbackInterface.OnUserResponse;
                }
                m_Wrapper.m_SubjectActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ValueChanged.started += instance.OnValueChanged;
                    @ValueChanged.performed += instance.OnValueChanged;
                    @ValueChanged.canceled += instance.OnValueChanged;
                    @NeutralCommandTriggered.started += instance.OnNeutralCommandTriggered;
                    @NeutralCommandTriggered.performed += instance.OnNeutralCommandTriggered;
                    @NeutralCommandTriggered.canceled += instance.OnNeutralCommandTriggered;
                    @UserResponse.started += instance.OnUserResponse;
                    @UserResponse.performed += instance.OnUserResponse;
                    @UserResponse.canceled += instance.OnUserResponse;
                }
            }
        }
        public SubjectActions @Subject => new SubjectActions(this);
        public interface ISupervisorActions
        {
            void OnNavigate(InputAction.CallbackContext context);
            void OnSubmit(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnScrollWheel(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnTrackedDevicePosition(InputAction.CallbackContext context);
            void OnTrackedDeviceOrientation(InputAction.CallbackContext context);
        }
        public interface ISubjectActions
        {
            void OnValueChanged(InputAction.CallbackContext context);
            void OnNeutralCommandTriggered(InputAction.CallbackContext context);
            void OnUserResponse(InputAction.CallbackContext context);
        }
    }
}
