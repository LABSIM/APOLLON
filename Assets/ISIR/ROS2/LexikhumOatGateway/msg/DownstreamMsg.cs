//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.LexikhumOatGateway
{
    [Serializable]
    public class DownstreamMsg : Message
    {
        public const string k_RosMessageName = "lexikhum_oat_gateway_msgs/Downstream";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  LEXIKHUM-OAT Gateway
        // 
        //  This program is free software: you can redistribute it and/or modify
        //  it under the terms of the GNU General Public License as published by
        //  the Free Software Foundation, either version 3 of the License, or
        //  (at your option) any later version.
        // 
        //  This program is distributed in the hope that it will be useful,
        //  but WITHOUT ANY WARRANTY; without even the implied warranty of
        //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        //  GNU General Public License for more details.
        // 
        //  You should have received a copy of the GNU General Public License
        //  along with this program; see the file COPYING.
        //  If not, see <http://www.gnu.org/licenses/>.
        // 
        // 
        //  uuid : unique message identifier (internal)
        // 
        public ulong uuid;
        // 
        //  ============================
        //      Datagram to discuss
        //  ============================
        // 
        //  entity_world_pose : position & orientation of the piloted entity in SI unit (meter, radian)
        // 
        public Geometry.PoseMsg entity_world_pose;
        // 
        //  current_gate_center : current target gate center in SI unit (meter) 
        // 
        public Geometry.PointMsg current_gate_center;
        // 
        //  current_gate_width : current target gate width in SI unit (meter) 
        // 
        public ulong current_gate_width;
        // 
        //  current_mode : current experimental shared intention mode
        //  [
        //      Undefined,  <- default
        //      Haptic,  
        //      Auditive, 
        //      Visual, 
        //      Practice
        //  ] 
        // 
        public string current_mode;
        // 
        //  current_phase : current experimental phase (string)
        //  (
        //      Undefined_Undefined, <- default
        //      Initialize_Session, 
        //      Initialize_Trial,  
        //      End_Trial, 
        //      End_Session, 
        //      Cue_Left,
        //      Cue_Right,
        //      StrongCue_Left,
        //      StrongCue_Right,
        //      Success_Center,
        //      Arrival_Center
        //  ) 
        // 
        public string current_phase;

        public DownstreamMsg()
        {
            this.uuid = 0;
            this.entity_world_pose = new Geometry.PoseMsg();
            this.current_gate_center = new Geometry.PointMsg();
            this.current_gate_width = 0;
            this.current_mode = "";
            this.current_phase = "";
        }

        public DownstreamMsg(ulong uuid, Geometry.PoseMsg entity_world_pose, Geometry.PointMsg current_gate_center, ulong current_gate_width, string current_mode, string current_phase)
        {
            this.uuid = uuid;
            this.entity_world_pose = entity_world_pose;
            this.current_gate_center = current_gate_center;
            this.current_gate_width = current_gate_width;
            this.current_mode = current_mode;
            this.current_phase = current_phase;
        }

        public static DownstreamMsg Deserialize(MessageDeserializer deserializer) => new DownstreamMsg(deserializer);

        private DownstreamMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.uuid);
            this.entity_world_pose = Geometry.PoseMsg.Deserialize(deserializer);
            this.current_gate_center = Geometry.PointMsg.Deserialize(deserializer);
            deserializer.Read(out this.current_gate_width);
            deserializer.Read(out this.current_mode);
            deserializer.Read(out this.current_phase);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.uuid);
            serializer.Write(this.entity_world_pose);
            serializer.Write(this.current_gate_center);
            serializer.Write(this.current_gate_width);
            serializer.Write(this.current_mode);
            serializer.Write(this.current_phase);
        }

        public override string ToString()
        {
            return "DownstreamMsg: " +
            "\nuuid: " + uuid.ToString() +
            "\nentity_world_pose: " + entity_world_pose.ToString() +
            "\ncurrent_gate_center: " + current_gate_center.ToString() +
            "\ncurrent_gate_width: " + current_gate_width.ToString() +
            "\ncurrent_mode: " + current_mode.ToString() +
            "\ncurrent_phase: " + current_phase.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
