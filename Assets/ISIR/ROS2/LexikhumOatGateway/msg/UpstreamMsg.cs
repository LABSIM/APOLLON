//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.LexikhumOatGateway
{
    [Serializable]
    public class UpstreamMsg : Message
    {
        public const string k_RosMessageName = "lexikhum_oat_gateway_msgs/Upstream";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  LEXIKHUM-OAT Gateway
        // 
        //  This program is free software: you can redistribute it and/or modify
        //  it under the terms of the GNU General Public License as published by
        //  the Free Software Foundation, either version 3 of the License, or
        //  (at your option) any later version.
        // 
        //  This program is distributed in the hope that it will be useful,
        //  but WITHOUT ANY WARRANTY; without even the implied warranty of
        //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        //  GNU General Public License for more details.
        // 
        //  You should have received a copy of the GNU General Public License
        //  along with this program; see the file COPYING.
        //  If not, see <http://www.gnu.org/licenses/>.
        // 
        // 
        //  uuid : unique message identifier (internal)
        // 
        public ulong uuid;
        // 
        //  ============================
        //      Datagram to discuss
        //  ============================
        // 
        //  haptic_arm_world_position : position of the haptic arm in SI unit (meter)
        // 
        public Geometry.Vector3Msg haptic_arm_world_position;
        // 
        //  gate_world_position : position of the current haptic center of the gate in SI unit (meter)
        // 
        public Geometry.Vector3Msg gate_world_position;
        // 
        //  gate_size_forward : forward size zone of the current haptic gate in SI unit (meter)
        // 
        public Geometry.Vector3Msg gate_size_forward;
        // 
        //  gate_size_dodge : dodge size zone of the current haptic gate in SI unit (meter)
        // 
        public Geometry.Vector3Msg gate_size_dodge;
        // 
        //  gate_gradiant_force : gradiant of force applied by the haptic arm (N) ?
        // 
        public Geometry.Vector3Msg gate_gradiant_force;

        public UpstreamMsg()
        {
            this.uuid = 0;
            this.haptic_arm_world_position = new Geometry.Vector3Msg();
            this.gate_world_position = new Geometry.Vector3Msg();
            this.gate_size_forward = new Geometry.Vector3Msg();
            this.gate_size_dodge = new Geometry.Vector3Msg();
            this.gate_gradiant_force = new Geometry.Vector3Msg();
        }

        public UpstreamMsg(ulong uuid, Geometry.Vector3Msg haptic_arm_world_position, Geometry.Vector3Msg gate_world_position, Geometry.Vector3Msg gate_size_forward, Geometry.Vector3Msg gate_size_dodge, Geometry.Vector3Msg gate_gradiant_force)
        {
            this.uuid = uuid;
            this.haptic_arm_world_position = haptic_arm_world_position;
            this.gate_world_position = gate_world_position;
            this.gate_size_forward = gate_size_forward;
            this.gate_size_dodge = gate_size_dodge;
            this.gate_gradiant_force = gate_gradiant_force;
        }

        public static UpstreamMsg Deserialize(MessageDeserializer deserializer) => new UpstreamMsg(deserializer);

        private UpstreamMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.uuid);
            this.haptic_arm_world_position = Geometry.Vector3Msg.Deserialize(deserializer);
            this.gate_world_position = Geometry.Vector3Msg.Deserialize(deserializer);
            this.gate_size_forward = Geometry.Vector3Msg.Deserialize(deserializer);
            this.gate_size_dodge = Geometry.Vector3Msg.Deserialize(deserializer);
            this.gate_gradiant_force = Geometry.Vector3Msg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.uuid);
            serializer.Write(this.haptic_arm_world_position);
            serializer.Write(this.gate_world_position);
            serializer.Write(this.gate_size_forward);
            serializer.Write(this.gate_size_dodge);
            serializer.Write(this.gate_gradiant_force);
        }

        public override string ToString()
        {
            return "UpstreamMsg: " +
            "\nuuid: " + uuid.ToString() +
            "\nhaptic_arm_world_position: " + haptic_arm_world_position.ToString() +
            "\ngate_world_position: " + gate_world_position.ToString() +
            "\ngate_size_forward: " + gate_size_forward.ToString() +
            "\ngate_size_dodge: " + gate_size_dodge.ToString() +
            "\ngate_gradiant_force: " + gate_gradiant_force.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
